Version 1
SubGoalCombiner SGC_AND
INITSECTION
// constants
//// DB_SMG_LGM_CONST_CRITTERS((INTEGER)_INDEX, (GUIDSTRING)_CRITTER_GUID);
DB_SMG_LGM_CONST_CRITTERS(0, 3c88c158-eebe-4e8a-bc20-e0c4ae336163); // Spider_Tiny
DB_SMG_LGM_CONST_CRITTERS(1, aa60d129-8d11-4178-a22b-836062e86010); // RAT_A
DB_SMG_LGM_CONST_CRITTERS(2, e0ff3383-6f2c-47b0-a989-bdf8b1c2b554); // Snake_Viper
DB_SMG_LGM_CONST_CRITTERS(3, 704a9343-2f4c-49a1-b936-c6d0594ade86); // BASE_Gremishka
DB_SMG_LGM_CONST_CRITTERS(4, 27b9089b-9aef-44e9-aaf7-100e3e320823); // Intellect_Devourer_PlayerWildshape
DB_SMG_LGM_CONST_CRITTERS(5, 319efbbe-f9f3-4584-804e-3e17d47d1136); // Beholder_Spectator
//// DB_SMG_LGM_CONST_CRITTER_TOTAL((INTEGER)_CRITTER_TOTAL);
DB_SMG_LGM_CONST_CRITTER_TOTAL(6);
//// DB_SMG_LGM_CONST_CRITTER_TREASURES((INTEGER)_INDEX, (STRING)_TREASURE_TABLE);
DB_SMG_LGM_CONST_CRITTER_TREASURES(0, "Valuables_Gems");
DB_SMG_LGM_CONST_CRITTER_TREASURES(1, "Valuables_MetalBars");
DB_SMG_LGM_CONST_CRITTER_TREASURES(2, "Alchemy_Potion");
DB_SMG_LGM_CONST_CRITTER_TREASURES(3, "ST_Alcohol");
DB_SMG_LGM_CONST_CRITTER_TREASURES(4, "Supplies_Food_10_Cooked");
DB_SMG_LGM_CONST_CRITTER_TREASURES(5, "ST_Dyes_AllUncommon");
DB_SMG_LGM_CONST_CRITTER_TREASURES(6, "Empty");
DB_SMG_LGM_CONST_CRITTER_TREASURES(7, "Empty");
DB_SMG_LGM_CONST_CRITTER_TREASURES(8, "Empty");
DB_SMG_LGM_CONST_CRITTER_TREASURES(9, "Empty");
DB_SMG_LGM_CONST_CRITTER_TREASURES(10, "Empty");
//// DB_SMG_LGM_CONST_CRITTER_TREASURE_COUNT((INTEGER)_CRITTER_TREASURE_COUNT);
DB_SMG_LGM_CONST_CRITTER_TREASURE_COUNT(11);
//// DB_SMG_LGM_CONST_CRITTER_RARITY((REAL)_CRITTER_RARITY);
DB_SMG_LGM_CONST_CRITTER_RARITY(0.1);
//// DB_SMG_LGM_CONST_CRITTER_SPEED((INTEGER)_INDEX, (STRING)_SPEED);
DB_SMG_LGM_CONST_CRITTER_SPEED(0, "Walk");
DB_SMG_LGM_CONST_CRITTER_SPEED(1, "Walk");
DB_SMG_LGM_CONST_CRITTER_SPEED(2, "Run");
//// DB_SMG_LGM_CONST_CRITTER_SPEED_TOTAL((INTEGER)_SPEED_TOTAL);
DB_SMG_LGM_CONST_CRITTER_SPEED_TOTAL(3);

// variables
//// DB_SMG_LGM_VAR_CRITTER((GUIDSTRING)_CRITTER, (STRING)_SPEED, (INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_CRITTER_NEXT_CELL((GUIDSTRING)_CRITTER, (INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_CRITTER_NEXT_CELLS((GUIDSTRING)_CRITTER, (INTEGER)_INDEX, (INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT((GUIDSTRING)_CRITTER, (INTEGER)_COUNT);
//// DB_SMG_LGM_VAR_CRITTER_PREV_CELL((GUIDSTRING)_CRITTER, (INTEGER)_ROW, (INTEGER)_COLUMN);

//CONT_GEN_Crate_Wood_B_9611ac43-410c-447d-b786-853b8d30408c
KBSECTION
// This Baldur's Gate 3 mod will create a small maze and transport the
// player to the start of the maze. They can wander throught the maze and
// find random loot. When the player reaches the end of the maze,
// they are returned to their original spot.

// randomly start critters with treasure moving in maze
PROC
PROC_SMG_LGM_START_CRITTERS()
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
IntegerProduct(_ROW_SIZE, _COLUMN_SIZE, _SIZE)
AND
IntegerToReal(_SIZE, _REAL_SIZE)
AND
DB_SMG_LGM_CONST_CRITTER_RARITY(_CRITTER_RARITY)
AND
RealProduct(_CRITTER_RARITY, _REAL_SIZE, _CRITTER_COUNT_REAL)
AND
RealToInteger(_CRITTER_COUNT_REAL, _CRITTER_COUNT)
THEN
PROC_ADD_CRITTER(_CRITTER_COUNT);

PROC
PROC_ADD_CRITTER((INTEGER)_CRITTER_COUNTER)
AND
_CRITTER_COUNTER > 0
AND
IntegerSubtract(_CRITTER_COUNTER, 1, _CRITTER_COUNTER_MINUS_1)
AND
DB_SMG_LGM_CONST_CRITTER_TOTAL(_CRITTER_TOTAL)
AND
Random(_CRITTER_TOTAL, _CRITTER_INDEX)
AND
DB_SMG_LGM_CONST_CRITTERS(_CRITTER_INDEX, _CRITTER_GUID)
THEN
PROC_START_CRITTER_RANDOM_PATH(_CRITTER_GUID);
PROC_ADD_CRITTER(_CRITTER_COUNTER_MINUS_1);

PROC
PROC_START_CRITTER_RANDOM_PATH((GUIDSTRING)_CRITTER_GUID)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
Random(_ROW_SIZE, _ROW_START)
AND
Random(_COLUMN_SIZE, _COLUMN_START)
THEN
PROC_SMG_LGM_ADD_OBJECT(_CRITTER_GUID, 0.0, _ROW_START, _COLUMN_START, 0, 0, 0.0, 0.0, 0.0);
PROC_START_CRITTER(_ROW_START, _COLUMN_START);

PROC
PROC_START_CRITTER((INTEGER)_ROW_START, (INTEGER)_COLUMN_START)
AND
DB_SMG_LGM_VAR_LAST_PLACED_PART(_CRITTER)
AND
DB_SMG_LGM_CONST_CRITTER_TREASURE_COUNT(_CRITTER_TREASURE_COUNT)
AND
Random(_CRITTER_TREASURE_COUNT, _CRITTER_TREASURE_INDEX)
AND
DB_SMG_LGM_CONST_CRITTER_TREASURES(_CRITTER_TREASURE_INDEX, _TREASURE_TABLE)
AND
DB_SMG_LGM_CONST_CRITTER_SPEED_TOTAL(_SPEED_TOTAL)
AND
Random(_SPEED_TOTAL, _SPEED_INDEX)
AND
DB_SMG_LGM_CONST_CRITTER_SPEED(_SPEED_INDEX, _SPEED)
AND
DB_Players(_Player)
THEN
DB_SMG_LGM_VAR_CRITTER(_CRITTER, _SPEED, _ROW_START, _COLUMN_START);
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER);
DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _ROW_START, _COLUMN_START);
PROC_NEXT_CRITTER_RANDOM_PATH(_CRITTER);
GenerateTreasure(_CRITTER, _TREASURE_TABLE, 0, _Player);

PROC
PROC_NEXT_CRITTER_RANDOM_PATH((GUIDSTRING)_CRITTER)
AND
DB_SMG_LGM_VAR_CRITTER((GUIDSTRING)_CRITTER, _SPEED, _X_POS, _Z_POS)
THEN
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_CRITTER);
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_CRITTER_NEXT_CELLS(_CRITTER);
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER);
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, 0);
PROC_GET_NEXT_CELLS(_CRITTER);
PROC_CHOOSE_NEXT_CELL(_CRITTER);
PROC_MOVE_CRITTER_TO_NEXT_CELL(_CRITTER);

PROC
PROC_GET_NEXT_CELLS((GUIDSTRING)_CRITTER)
AND
DB_SMG_LGM_VAR_CRITTER(_CRITTER, _SPEED, _CURRENT_ROW, _CURRENT_COLUMN)
AND
DB_SMG_LGM_CONST_DELTA_DIRECTION(_DIRECTION, _DELTA_ROW, _DELTA_COLUMN)
AND
IntegerSum(_CURRENT_ROW, _DELTA_ROW, _NEXT_ROW)
AND
IntegerSum(_CURRENT_COLUMN, _DELTA_COLUMN, _NEXT_COLUMN)
AND
IntegerMin(_CURRENT_ROW, _NEXT_ROW, _MIN_ROW)
AND
IntegerMax(_CURRENT_ROW, _NEXT_ROW, _MAX_ROW)
AND
IntegerMin(_CURRENT_COLUMN, _NEXT_COLUMN, _MIN_COLUMN)
AND
IntegerMax(_CURRENT_COLUMN, _NEXT_COLUMN, _MAX_COLUMN)
AND
DB_SMG_LGM_VAR_PASSAGE(_MIN_ROW, _MIN_COLUMN, _MAX_ROW, _MAX_COLUMN)
AND
NOT DB_SMG_LGM_VAR_ADDON(_NEXT_ROW, _NEXT_COLUMN, _, _, _)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, _COUNT)
AND
IntegerSum(_COUNT, 1, _NEXT_COUNT)
THEN
DB_SMG_LGM_VAR_CRITTER_NEXT_CELLS(_CRITTER, _COUNT, _NEXT_ROW, _NEXT_COLUMN);
NOT DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, _COUNT);
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, _NEXT_COUNT);

// if multiple possible next cells, choose one at random
PROC
PROC_CHOOSE_NEXT_CELL((GUIDSTRING)_CRITTER)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, _NEXT_COUNT)
AND
_NEXT_COUNT > 1
AND
Random(_NEXT_COUNT, _NEXT_CELL_INDEX)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELLS(_CRITTER, _NEXT_CELL_INDEX, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN)
AND
NOT DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN)
AND
DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _PREV_CELL_ROW, _PREV_CELL_COLUMN)
THEN
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_CRITTER, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN);
NOT DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _PREV_CELL_ROW, _PREV_CELL_COLUMN);
DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN);

// if only one possible next cell, choose that one
PROC
PROC_CHOOSE_NEXT_CELL((GUIDSTRING)_CRITTER)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL_COUNT(_CRITTER, _NEXT_COUNT)
AND
_NEXT_COUNT == 1
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELLS(_CRITTER, _, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN)
AND
DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _PREV_CELL_ROW, _PREV_CELL_COLUMN)
THEN
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_CRITTER, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN);
NOT DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _PREV_CELL_ROW, _PREV_CELL_COLUMN);
DB_SMG_LGM_VAR_CRITTER_PREV_CELL(_CRITTER, _NEXT_CELL_ROW, _NEXT_CELL_COLUMN);

//PROC
//PROC_GET_RANDOM_NEXT_CELL((INTEGER)_X_POS, (INTEGER)_Z_POS)
//AND
//NOT DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_, _)
//AND
//DB_SMG_LGM_CONST_DELTA_DIRECTION(_DIRECTION, _DELTA_X, _DELTA_Z)
//AND
//IntegerSum(_X_POS, _DELTA_X, _NEXT_X)
//AND
//IntegerSum(_Z_POS, _DELTA_Z, _NEXT_Z)
//AND
//DB_SMG_LGM_VAR_PASSAGE(_NEXT_X, _NEXT_Z, _X, _Z)
//THEN
//DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_NEXT_X, _NEXT_Z);

PROC
PROC_MOVE_CRITTER_TO_NEXT_CELL((GUIDSTRING)_CRITTER_GUID)
AND
DB_SMG_LGM_VAR_CRITTER((GUIDSTRING)_CRITTER_GUID, _SPEED, _, _)
AND
DB_SMG_LGM_VAR_CENTER(_X_CENTER, _Y_CENTER, _Z_CENTER)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_CRITTER_GUID, _NEXT_ROW, _NEXT_COLUMN)
AND
DB_SMG_LGM_CONST_PART_DIMENSION("XZ_Multiplier", _XZ_Multiplier)
AND
IntegerToReal(_NEXT_ROW, _NEXT_X_REAL)
AND
RealProduct(_NEXT_X_REAL, _XZ_Multiplier, _NEXT_X_1)
AND
RealSum(_NEXT_X_1, _X_CENTER, _X_TO)
AND
IntegerToReal(_NEXT_COLUMN, _NEXT_Z_REAL)
AND
RealProduct(_NEXT_Z_REAL, _XZ_Multiplier, _NEXT_Z_1)
AND
RealSum(_NEXT_Z_1, _Z_CENTER, _Z_TO)
THEN
CharacterMoveToPosition((CHARACTER)_CRITTER_GUID, _X_TO, 0.0, _Z_TO, _SPEED, "CRITTER_MOVE", 0);

IF
EntityEvent((GUIDSTRING)_CRITTER_GUID, "CRITTER_MOVE")
AND
DB_SMG_LGM_VAR_CRITTER((GUIDSTRING)_CRITTER_GUID, _SPEED, _ROW, _COLUMN)
AND
DB_SMG_LGM_VAR_CRITTER_NEXT_CELL(_CRITTER_GUID, _NEXT_ROW, _NEXT_COLUMN)
THEN
NOT DB_SMG_LGM_VAR_CRITTER(_CRITTER_GUID, _SPEED, _ROW, _COLUMN);
DB_SMG_LGM_VAR_CRITTER((GUIDSTRING)_CRITTER_GUID, _SPEED, _NEXT_ROW, _NEXT_COLUMN);
PROC_NEXT_CRITTER_RANDOM_PATH(_CRITTER_GUID);

//IF
//EntityEvent(_Object, "CREATE_CRITTER")
//AND
//DB_Players(_Player)
//THEN
//DebugText(_Player, "CREATE_CRITTER");
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
