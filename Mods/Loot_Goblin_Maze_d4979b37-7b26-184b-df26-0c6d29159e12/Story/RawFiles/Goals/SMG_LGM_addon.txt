Version 1
SubGoalCombiner SGC_AND
INITSECTION
// constants
//// DB_SMG_LGM_CONST_PORTAL_TYPE((STRING)_DIRECTION, (STRING)_PORTAL_NAME);
DB_SMG_LGM_CONST_PORTAL_TYPE("N", "ENTRANCE_PORTAL");
DB_SMG_LGM_CONST_PORTAL_TYPE("S", "EXIT_PORTAL");
//// DB_SMG_LGM_CONST_PORTAL_X_DISPLACEMENT((STRING)_DIRECTION, (REAL)_DISPLACEMENT_DISTANCE);
DB_SMG_LGM_CONST_PORTAL_X_DISPLACEMENT("N", 0.15);
DB_SMG_LGM_CONST_PORTAL_X_DISPLACEMENT("S", -0.15);
//// DB_SMG_LGM_CONST_PORTAL_DELTA_ROW((STRING)_DIRECTION, (INTEGER)_DELTA_ROW);
DB_SMG_LGM_CONST_PORTAL_DELTA_ROW("N", 0);
DB_SMG_LGM_CONST_PORTAL_DELTA_ROW("S", 1);
DB_SMG_LGM_CONST_PART_GUID("ENTRANCE_PORTAL_GUID", 40209ad5-3caf-4d56-9a80-d9b4683ddf56);
DB_SMG_LGM_CONST_PART_GUID("EXIT_PORTAL_GUID", 68c6dffe-0715-4317-920a-4f46267867d8);
DB_SMG_LGM_CONST_PART_DIMENSION("ENTRANCE_PORTAL_XZ_Offset", 1.0);
/////DB_SMG_LGM_CONST_PART_DIMENSION("ENTRANCE_PORTAL_Y_Offset", 0.0);
DB_SMG_LGM_CONST_PART_DIMENSION("EXIT_PORTAL_XZ_Offset", 1.0);
/////DB_SMG_LGM_CONST_PART_DIMENSION("EXIT_PORTAL_Y_Offset", 0.0);
DB_SMG_LGM_CONST_PART_GUID("LEVER_GUID", b6add010-0c40-46f2-9014-2bc5df932c0b);
DB_SMG_LGM_CONST_PART_DIMENSION("LEVER_XZ_Offset", 0.0);
DB_SMG_LGM_CONST_PART_GUID("SLIDING_DOOR_GUID", 741339ef-159f-4e73-94a5-bff142d173c6);
DB_SMG_LGM_CONST_PART_DIMENSION("SLIDING_DOOR_XZ_Offset", 1.0);
DB_SMG_LGM_CONST_PART_GUID("PUZZLE_WALL_GUID", 218ad08b-763f-451b-98cd-df3a399acfe8);
DB_SMG_LGM_CONST_PART_DIMENSION("PUZZLE_WALL_XZ_Offset", 1.0);
DB_SMG_LGM_CONST_PART_GUID("PUZZLE_BUTTON_GUID", 17970485-952c-4590-bbf0-a90bb60d4100);
DB_SMG_LGM_CONST_PART_DIMENSION("PUZZLE_BUTTON_XZ_Offset", 0.0);
DB_SMG_LGM_CONST_PART_GUID("SHELF_GUID", dbd91eb7-79e0-4f56-a13e-0b1ecd045d57);
DB_SMG_LGM_CONST_PART_DIMENSION("SHELF_XZ_Offset", 0.0);

//// DB_SMG_LGM_CONST_ADDON_WALL_DELTA((STRING)_DIRECTION, (INTEGER)_DELTA_X, (INTEGER)_DELTA_Z);
DB_SMG_LGM_CONST_ADDON_WALL_DELTA("N", +1, 0);
DB_SMG_LGM_CONST_ADDON_WALL_DELTA("S", 0, 0);
DB_SMG_LGM_CONST_ADDON_WALL_DELTA("E", 0, 0);
DB_SMG_LGM_CONST_ADDON_WALL_DELTA("W", 0, +1);
//// DB_SMG_LGM_CONST_ADDON_WALL_ROTATION((STRING)_DIRECTION, (INTEGER)_WALL_ROTATION);
DB_SMG_LGM_CONST_ADDON_WALL_ROTATION("N", 1);
DB_SMG_LGM_CONST_ADDON_WALL_ROTATION("S", 1);
DB_SMG_LGM_CONST_ADDON_WALL_ROTATION("E", 0);
DB_SMG_LGM_CONST_ADDON_WALL_ROTATION("W", 0);

DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("W", 0, 0.1, 0.0, 0.7);
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("W", 1, 0.2, 0.0, 0.7);
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("W", 2, 0.3, 0.0, 0.7);
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("E", 0, -0.1, 0.0, -0.7);
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("E", 1, -0.2, 0.0, -0.7);
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT("E", 2, -0.3, 0.0, -0.7);
DB_SMG_LGM_CONST_ADDON_SLIDING_DOOR_DISPLACEMENT("W", -0.5, 0.0, 0.0);
DB_SMG_LGM_CONST_ADDON_SLIDING_DOOR_DISPLACEMENT("E", -0.5, 0.0, -1.0);
DB_SMG_LGM_CONST_ADDON_PUZZLE_WALL_DISPLACEMENT("N", 1.0, 0.0, 0.0);
DB_SMG_LGM_CONST_ADDON_PUZZLE_WALL_DISPLACEMENT("S", 0.0, 0.0, 0.0);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("N", 0,0.64, 0.25, -0.3);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("N", 1, 0.64, 0.25, -0.1);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("N", 2, 0.64, 0.25, 0.1);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("N", 3, 0.64, 0.25, 0.3);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("S", 0, -0.64, 0.25, 0.3);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("S", 1, -0.64, 0.25, 0.1);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("S", 2, -0.64, 0.25, -0.1);
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT("S", 3, -0.64, 0.25, -0.3);

////////////////////////////////////////
DB_SMG_LGM_CONST_ADDON_ROTATION("W", 0);
DB_SMG_LGM_CONST_ADDON_ROTATION("S", 1);
DB_SMG_LGM_CONST_ADDON_ROTATION("E", 2);
DB_SMG_LGM_CONST_ADDON_ROTATION("N", 3);

DB_SMG_LGM_CONST_PUZZLE_WALL_SPEED_ACCELERATION(0.3, 1.5);

//DOOR_City_Bhaal_House_Secret_Sliding_A_be0379ff-6eba-4fb3-96f4-cb637fdd2273
//DOOR_City_Bhaal_House_Secret_Sliding_A_Dirty_06668a27-3652-4b39-94b9-1ed74eca230c
//DOOR_City_Bhaal_House_Secret_Sliding_B_02a1b856-9c61-4c7f-b59f-462d8001120e
//PUZ_GEN_Castle_Wall_Breakable_A_183153fc-10d2-43f0-a0ca-0ced735adef5
//PUZ_GEN_DestructibleWall_Wood_A_d374f147-8d09-4972-9261-b729d955b7d2
//TOOL_GEN_Sign_Wall_A_Gold_0cbd644f-4b14-4e73-a692-328f82eb4087
//TOOL_GEN_Sign_Wall_A_Wood_b1b8a6ff-3eb7-4d31-badf-49c49c204e14
//DOOR_Harbor_House_Secret_Sliding_C_9a6d6ae6-9b4a-4b29-95c9-1847e2f34612
//INTERACT_FUR_GEN_Tavern_Table_Round_Small_A_dab06534-5571-4251-a959-6c26d9d0da2d

// variables
//// DB_SMG_LGM_VAR_LEVER_OPENER((INTEGER)_ADDON_ID, (INTEGER)_OPEN_VALUE);
//// DB_SMG_LGM_VAR_LEVER_SETTINGS((INTEGER)_ADDON_ID, (INTEGER)_INDEX, (INTEGER)_IS_ON);
//// DB_SMG_LGM_VAR_LEVERS((INTEGER)_ADDON_ID, (INTEGER)_INDEX, (ITEM)_LEVER);
//// DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX((INTEGER)_ADDON_ID, (INTEGER)_CURRENT_SEQUENCE_INDEX);
//// DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX((INTEGER)_ADDON_ID, (INTEGER)_TABLE_INDEX);
//// DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE((INTEGER)_TABLE_INDEX, (INTEGER)_SEQUENCE_INDEX, (INTEGER)_BUTTON_INDEX);
//// DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX((INTEGER)_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX);
//// DB_SMG_LGM_VAR_PUZZLE_BUTTONS((INTEGER)_ADDON_ID, (INTEGER)_INDEX, (ITEM)_PUZZLE_BUTTON);
//// DB_SMG_LGM_VAR_PUZZLE_WALL((INTEGER)_ADDON_ID, (ITEM)_PUZZLE_WALL);
//// DB_SMG_LGM_VAR_SLIDING_DOOR((INTEGER)_ADDON_ID, (ITEM)_SLIDING_DOOR);
KBSECTION
// This Baldur's Gate 3 mod will create a small maze and transport the
// player to the start of the maze. They can wander throught the maze and
// find random loot. When the player reaches the end of the maze,
// they are returned to their original spot.

///////////////////////// ADDON

// create puzzle button opener table
PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE()
THEN
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX(0);
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP(0, 0, 0, 0);

PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
THEN
PROC_CHECK_PUZZLE_BUTTON_OPENER_TABLE_LOOP(_TABLE_INDEX_0, _TABLE_INDEX_1, _TABLE_INDEX_2, _TABLE_INDEX_3);

PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
_TABLE_INDEX_3 < 3
AND
IntegerSum(_TABLE_INDEX_3, 1, _NEW_TABLE_INDEX_3)
THEN
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP(_TABLE_INDEX_0, _TABLE_INDEX_1, _TABLE_INDEX_2, _NEW_TABLE_INDEX_3);

PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
_TABLE_INDEX_3 == 3
AND
_TABLE_INDEX_2 < 3
AND
IntegerSum(_TABLE_INDEX_2, 1, _NEW_TABLE_INDEX_2)
THEN
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP(_TABLE_INDEX_0, _TABLE_INDEX_1, _NEW_TABLE_INDEX_2, 0);

PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
_TABLE_INDEX_3 == 3
AND
_TABLE_INDEX_2 == 3
AND
_TABLE_INDEX_1 < 3
AND
IntegerSum(_TABLE_INDEX_1, 1, _NEW_TABLE_INDEX_1)
THEN
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP(_TABLE_INDEX_0, _NEW_TABLE_INDEX_1, 0, 0);

PROC
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
_TABLE_INDEX_3 == 3
AND
_TABLE_INDEX_2 == 3
AND
_TABLE_INDEX_1 == 3
AND
_TABLE_INDEX_0 < 3
AND
IntegerSum(_TABLE_INDEX_0, 1, _NEW_TABLE_INDEX_0)
THEN
PROC_CREATE_PUZZLE_BUTTON_OPENER_TABLE_LOOP(_NEW_TABLE_INDEX_0, 0, 0, 0);

PROC
PROC_CHECK_PUZZLE_BUTTON_OPENER_TABLE_LOOP((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
_TABLE_INDEX_0 != _TABLE_INDEX_1
AND
_TABLE_INDEX_0 != _TABLE_INDEX_2
AND
_TABLE_INDEX_0 != _TABLE_INDEX_3
AND
_TABLE_INDEX_1 != _TABLE_INDEX_2
AND
_TABLE_INDEX_1 != _TABLE_INDEX_3
AND
_TABLE_INDEX_2 != _TABLE_INDEX_3
THEN
PROC_ADD_PUZZLE_BUTTON_OPENER_TABLE(_TABLE_INDEX_0, _TABLE_INDEX_1, _TABLE_INDEX_2, _TABLE_INDEX_3);

PROC
PROC_ADD_PUZZLE_BUTTON_OPENER_TABLE((INTEGER)_TABLE_INDEX_0, (INTEGER)_TABLE_INDEX_1, (INTEGER)_TABLE_INDEX_2, (INTEGER)_TABLE_INDEX_3)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX)
AND
IntegerSum(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX, 1, _NEW_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX)
THEN
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX, 0, _TABLE_INDEX_0);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX, 1, _TABLE_INDEX_1);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX, 2, _TABLE_INDEX_2);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX, 3, _TABLE_INDEX_3);
NOT DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX(_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX(_NEW_PUZZLE_BUTTON_OPENER_TABLE_LOOP_INDEX);
// end create puzzle button opener table

// construct the addons from design
PROC
PROC_SMG_LGM_CONSTRUCT_ADDONS()
AND
DB_SMG_LGM_VAR_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ID)
THEN
PROC_SMG_LGM_CREATE_ADDON(_ROW, _COLUMN, _COMPASS_DIRECTION, _TYPE, _ID);

// create an addon room at the border of the maze
PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ID)
THEN
PROC_SMG_LGM_ADD_PART("Roof", _ROW, _COLUMN, 1, 0, 0.0, 0.0, 0.0);

PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ID)
AND
DB_SMG_LGM_CONST_DELTA_DIRECTION(_COMPASS_DIRECTION, _DELTA_X, _DELTA_Z)
AND
IntegerSum(_ROW, _DELTA_X, _ROW_ADDON)
AND
IntegerSum(_COLUMN, _DELTA_Z, _COLUMN_ADDON)
THEN
PROC_SMG_LGM_CREATE_PASSAGE(_ROW, _COLUMN, _ROW_ADDON, _COLUMN_ADDON);
PROC_SMG_LGM_CREATE_ADDON_WALLS(_ROW, _COLUMN, _COMPASS_DIRECTION);

PROC
PROC_SMG_LGM_CREATE_ADDON_WALLS((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION)
AND
DB_SMG_LGM_CONST_ADDON_WALL_DELTA(_WALL_DIRECTION, _DELTA_X, _DELTA_Z)
AND
_COMPASS_DIRECTION != _WALL_DIRECTION
AND
IntegerSum(_ROW, _DELTA_X, _ROW_WALL_ADDON)
AND
IntegerSum(_COLUMN, _DELTA_Z, _COLUMN_WALL_ADDON)
AND
DB_SMG_LGM_CONST_ADDON_WALL_ROTATION(_WALL_DIRECTION, _WALL_ROTATION)
THEN
PROC_SMG_LGM_ADD_PART("Wall", _ROW_WALL_ADDON, _COLUMN_WALL_ADDON, 0, _WALL_ROTATION);

//create a terminal (portal) room
PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ID)
AND
_TYPE == "TERMINAL"
AND
DB_SMG_LGM_CONST_PORTAL_X_DISPLACEMENT(_COMPASS_DIRECTION, _PORTAL_X_DISPLACEMENT)
AND
DB_SMG_LGM_CONST_PORTAL_DELTA_ROW(_COMPASS_DIRECTION, _DELTA_ROW)
AND
IntegerSum(_ROW, _DELTA_ROW, _PORTAL_ROW)
AND
DB_SMG_LGM_CONST_PORTAL_TYPE(_COMPASS_DIRECTION, _PORTAL_TYPE)
THEN
PROC_SMG_LGM_ADD_PART(_PORTAL_TYPE, _PORTAL_ROW, _COLUMN, 0, 1, _PORTAL_X_DISPLACEMENT, 0.0, 0.0);

// create a button activated room
PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ADDON_ID)
AND
DB_Players(_Player)
AND
_TYPE == "BUTTON"
AND
DB_SMG_LGM_CONST_ADDON_PUZZLE_WALL_DISPLACEMENT(_COMPASS_DIRECTION, _X_PUZZLE_WALL_DISPLACEMENT, _Y_PUZZLE_WALL_DISPLACEMENT, _Z_PUZZLE_WALL_DISPLACEMENT)
AND
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT(_COMPASS_DIRECTION, 0, _X_PUZZLE_BUTTON_DISPLACEMENT_0, _Y_PUZZLE_BUTTON_DISPLACEMENT_0, _Z_PUZZLE_BUTTON_DISPLACEMENT_0)
AND
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT(_COMPASS_DIRECTION, 1, _X_PUZZLE_BUTTON_DISPLACEMENT_1, _Y_PUZZLE_BUTTON_DISPLACEMENT_1, _Z_PUZZLE_BUTTON_DISPLACEMENT_1)
AND
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT(_COMPASS_DIRECTION, 2, _X_PUZZLE_BUTTON_DISPLACEMENT_2, _Y_PUZZLE_BUTTON_DISPLACEMENT_2, _Z_PUZZLE_BUTTON_DISPLACEMENT_2)
AND
DB_SMG_LGM_CONST_ADDON_PUZZLE_BUTTON_DISPLACEMENT(_COMPASS_DIRECTION, 3, _X_PUZZLE_BUTTON_DISPLACEMENT_3, _Y_PUZZLE_BUTTON_DISPLACEMENT_3, _Z_PUZZLE_BUTTON_DISPLACEMENT_3)
AND
DB_SMG_LGM_CONST_ADDON_ROTATION(_COMPASS_DIRECTION, _ROTATION)
AND
Random(24, _TABLE_INDEX)
THEN
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID);
PROC_SMG_LGM_CLEAR_DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX(_ADDON_ID);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, 0);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX(_ADDON_ID, _TABLE_INDEX);
PROC_SMG_LGM_ADD_PART("PUZZLE_BUTTON", _ROW, _COLUMN, 0, _ROTATION, _X_PUZZLE_BUTTON_DISPLACEMENT_0, _Y_PUZZLE_BUTTON_DISPLACEMENT_0, _Z_PUZZLE_BUTTON_DISPLACEMENT_0);
PROC_SAVE_PUZZLE_BUTTON(_ADDON_ID, 0);
PROC_SMG_LGM_ADD_PART("PUZZLE_BUTTON", _ROW, _COLUMN, 0, _ROTATION, _X_PUZZLE_BUTTON_DISPLACEMENT_1, _Y_PUZZLE_BUTTON_DISPLACEMENT_1, _Z_PUZZLE_BUTTON_DISPLACEMENT_1);
PROC_SAVE_PUZZLE_BUTTON(_ADDON_ID, 1);
PROC_SMG_LGM_ADD_PART("PUZZLE_BUTTON", _ROW, _COLUMN, 0, _ROTATION, _X_PUZZLE_BUTTON_DISPLACEMENT_2, _Y_PUZZLE_BUTTON_DISPLACEMENT_2, _Z_PUZZLE_BUTTON_DISPLACEMENT_2);
PROC_SAVE_PUZZLE_BUTTON(_ADDON_ID, 2);
PROC_SMG_LGM_ADD_PART("PUZZLE_BUTTON", _ROW, _COLUMN, 0, _ROTATION, _X_PUZZLE_BUTTON_DISPLACEMENT_3, _Y_PUZZLE_BUTTON_DISPLACEMENT_3, _Z_PUZZLE_BUTTON_DISPLACEMENT_3);
PROC_SAVE_PUZZLE_BUTTON(_ADDON_ID, 3);
PROC_SMG_LGM_ADD_PART("PUZZLE_WALL", _ROW, _COLUMN, 0, 1, _X_PUZZLE_WALL_DISPLACEMENT, _Y_PUZZLE_WALL_DISPLACEMENT, _Z_PUZZLE_WALL_DISPLACEMENT);
PROC_SAVE_PUZZLE_WALL(_ADDON_ID);

// save the puzzle wall
PROC
PROC_SAVE_PUZZLE_WALL((INTEGER)_ADDON_ID)
AND
DB_SMG_LGM_VAR_LAST_PLACED_PART(_PUZZLE_WALL)
THEN
DB_SMG_LGM_VAR_PUZZLE_WALL(_ADDON_ID, _PUZZLE_WALL);

// save the puzzle button
PROC
PROC_SAVE_PUZZLE_BUTTON((INTEGER)_ADDON_ID, (INTEGER)_BUTTON_INDEX)
AND
DB_SMG_LGM_VAR_LAST_PLACED_PART(_PUZZLE_BUTTON)
THEN
DB_SMG_LGM_VAR_PUZZLE_BUTTONS(_ADDON_ID, _BUTTON_INDEX, _PUZZLE_BUTTON);

// push a puzzle button
PROC
PROC_PUSH_BUTTON((INTEGER)_ADDON_ID, (INTEGER)_PRESSED_BUTTON_INDEX, (ITEM)_PUZZLE_BUTTON)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _CURRENT_SEQUENCE_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX(_ADDON_ID, _OPENER_TABLE_BUTTON_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_OPENER_TABLE_BUTTON_INDEX, _CURRENT_SEQUENCE_INDEX, _BUTTON_INDEX)
AND
_PRESSED_BUTTON_INDEX != _BUTTON_INDEX
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS((INTEGER)_ADDON_ID, 0, _PUZZLE_BUTTON_0)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS((INTEGER)_ADDON_ID, 1, _PUZZLE_BUTTON_1)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS((INTEGER)_ADDON_ID, 2, _PUZZLE_BUTTON_2)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS((INTEGER)_ADDON_ID, 3, _PUZZLE_BUTTON_3)
THEN
RemoveStatus(_PUZZLE_BUTTON_0, "ITEM_PUZ_DRUID_RUNE_ACTIVATED");
RemoveStatus(_PUZZLE_BUTTON_1, "ITEM_PUZ_DRUID_RUNE_ACTIVATED");
RemoveStatus(_PUZZLE_BUTTON_2, "ITEM_PUZ_DRUID_RUNE_ACTIVATED");
RemoveStatus(_PUZZLE_BUTTON_3, "ITEM_PUZ_DRUID_RUNE_ACTIVATED");
NOT DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _CURRENT_SEQUENCE_INDEX);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, 0);

PROC
PROC_PUSH_BUTTON((INTEGER)_ADDON_ID, (INTEGER)_PRESSED_BUTTON_INDEX, (ITEM)_PUZZLE_BUTTON)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _CURRENT_SEQUENCE_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX(_ADDON_ID, _OPENER_TABLE_BUTTON_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_OPENER_TABLE_BUTTON_INDEX, _CURRENT_SEQUENCE_INDEX, _BUTTON_INDEX)
AND
_PRESSED_BUTTON_INDEX == _BUTTON_INDEX
AND
_CURRENT_SEQUENCE_INDEX == 3
THEN
PROC_CHECK_BUTTON_OPEN_PUZZLE_WALL(_ADDON_ID);

PROC
PROC_PUSH_BUTTON((INTEGER)_ADDON_ID, (INTEGER)_PRESSED_BUTTON_INDEX, (ITEM)_PUZZLE_BUTTON)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _CURRENT_SEQUENCE_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_INDEX(_ADDON_ID, _OPENER_TABLE_BUTTON_INDEX)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTON_OPENER_TABLE(_OPENER_TABLE_BUTTON_INDEX, _CURRENT_SEQUENCE_INDEX, _BUTTON_INDEX)
AND
_PRESSED_BUTTON_INDEX == _BUTTON_INDEX
AND
_CURRENT_SEQUENCE_INDEX < 3
AND
IntegerSum(_CURRENT_SEQUENCE_INDEX, 1, _NEW_CURRENT_SEQUENCE_INDEX)
THEN
ApplyStatus(_PUZZLE_BUTTON, "ITEM_PUZ_DRUID_RUNE_ACTIVATED", -1.0, 1, NULL_00000000-0000-0000-0000-000000000000);
NOT DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _CURRENT_SEQUENCE_INDEX);
DB_SMG_LGM_VAR_PUZZLE_BUTTON_CURRENT_SEQUENCE_INDEX(_ADDON_ID, _NEW_CURRENT_SEQUENCE_INDEX);

PROC
PROC_CHECK_BUTTON_OPEN_PUZZLE_WALL((INTEGER)_ADDON_ID)
AND
DB_SMG_LGM_VAR_PUZZLE_WALL(_ADDON_ID, _PUZZLE_WALL)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS(_ADDON_ID, 0, _PUZZLE_BUTTON_0)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS(_ADDON_ID, 1, _PUZZLE_BUTTON_1)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS(_ADDON_ID, 2, _PUZZLE_BUTTON_2)
AND
DB_SMG_LGM_VAR_PUZZLE_BUTTONS(_ADDON_ID, 3, _PUZZLE_BUTTON_3)
AND
GetPosition(_PUZZLE_WALL, _PUZZLE_WALL_X, _PUZZLE_WALL_Y, _PUZZLE_WALL_Z)
AND
DB_SMG_LGM_CONST_PART_DIMENSION("Y_Multiplier", _Y_Multiplier)
AND
RealSum(_PUZZLE_WALL_Y, _Y_Multiplier, _NEW_PUZZLE_WALL_Y)
AND
DB_SMG_LGM_CONST_PUZZLE_WALL_SPEED_ACCELERATION(_PUZZLE_WALL_SPEED, _PUZZLE_WALL_ACCELERATION)
THEN
ItemMoveToPosition(_PUZZLE_WALL, _PUZZLE_WALL_X, _NEW_PUZZLE_WALL_Y, _PUZZLE_WALL_Z, _PUZZLE_WALL_SPEED, _PUZZLE_WALL_ACCELERATION, "OPEN_WALL");
RequestDelete((ITEM)_PUZZLE_BUTTON_0);
RequestDelete((ITEM)_PUZZLE_BUTTON_1);
RequestDelete((ITEM)_PUZZLE_BUTTON_2);
RequestDelete((ITEM)_PUZZLE_BUTTON_3);

// create a lever activated room
PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ADDON_ID)
AND
_TYPE == "LEVER"
AND
IntegerSum(_COLUMN, 1, _COLUMN_PLUS_1)
AND
DB_SMG_LGM_CONST_ADDON_ROTATION(_COMPASS_DIRECTION, _ADDON_ROTATION)
AND
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT(_COMPASS_DIRECTION, 0, _X_LEVER_DISPLACEMENT_0, _Y_LEVER_DISPLACEMENT_0, _Z_LEVER_DISPLACEMENT_0)
AND
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT(_COMPASS_DIRECTION, 1, _X_LEVER_DISPLACEMENT_1, _Y_LEVER_DISPLACEMENT_1, _Z_LEVER_DISPLACEMENT_1)
AND
DB_SMG_LGM_CONST_ADDON_LEVER_DISPLACEMENT(_COMPASS_DIRECTION, 2, _X_LEVER_DISPLACEMENT_2, _Y_LEVER_DISPLACEMENT_2, _Z_LEVER_DISPLACEMENT_2)
AND
DB_SMG_LGM_CONST_ADDON_SLIDING_DOOR_DISPLACEMENT(_COMPASS_DIRECTION, _X_SLIDING_DOOR_DISPLACEMENT, _Y_SLIDING_DOOR_DISPLACEMENT, _Z_SLIDING_DOOR_DISPLACEMENT)
THEN
PROC_SMG_LGM_ADD_PART("LEVER", _ROW, _COLUMN, 0, _ADDON_ROTATION, _X_LEVER_DISPLACEMENT_0, _Y_LEVER_DISPLACEMENT_0, _Z_LEVER_DISPLACEMENT_0);
PROC_SAVE_LEVER(_ADDON_ID, 0);
PROC_SMG_LGM_ADD_PART("LEVER", _ROW, _COLUMN, 0, _ADDON_ROTATION, _X_LEVER_DISPLACEMENT_1, _Y_LEVER_DISPLACEMENT_1, _Z_LEVER_DISPLACEMENT_1);
PROC_SAVE_LEVER(_ADDON_ID, 1);
PROC_SMG_LGM_ADD_PART("LEVER", _ROW, _COLUMN, 0, _ADDON_ROTATION, _X_LEVER_DISPLACEMENT_2, _Y_LEVER_DISPLACEMENT_2, _Z_LEVER_DISPLACEMENT_2);
PROC_SAVE_LEVER(_ADDON_ID, 2);
PROC_SMG_LGM_ADD_PART("SLIDING_DOOR", _ROW, _COLUMN_PLUS_1, 0, 0, _X_SLIDING_DOOR_DISPLACEMENT, _Y_SLIDING_DOOR_DISPLACEMENT, _Z_SLIDING_DOOR_DISPLACEMENT);
PROC_SAVE_SLIDING_DOOR(_ADDON_ID);

// save the sliding door
PROC
PROC_SAVE_SLIDING_DOOR((INTEGER)_ADDON_ID)
AND
DB_SMG_LGM_VAR_LAST_PLACED_PART(_SLIDING_DOOR)
THEN
DB_SMG_LGM_VAR_SLIDING_DOOR(_ADDON_ID, _SLIDING_DOOR);

// save a lever
PROC
PROC_SAVE_LEVER((INTEGER)_ADDON_ID, (INTEGER)_LEVER_INDEX)
AND
DB_SMG_LGM_VAR_LAST_PLACED_PART(_LAST_PLACED_PART)
THEN
DB_SMG_LGM_VAR_LEVERS(_ADDON_ID, _LEVER_INDEX, _LAST_PLACED_PART);
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, _LEVER_INDEX, 0);

// flip a lever
PROC
PROC_FLIP_LEVER((INTEGER)_ADDON_ID, (INTEGER)_LEVER_INDEX)
AND
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, _LEVER_INDEX, _OLD_IS_ON)
AND
IntegerSubtract(1, _OLD_IS_ON, _NEW_IS_ON)
THEN
NOT DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, _LEVER_INDEX, _OLD_IS_ON);
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, _LEVER_INDEX, _NEW_IS_ON);
PROC_CHECK_LEVER_OPEN_SLIDING_DOOR(_ADDON_ID);

PROC
PROC_CHECK_LEVER_OPEN_SLIDING_DOOR((INTEGER)_ADDON_ID)
AND
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, 0, _LEVER_GUESS_VALUE_0)
AND
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, 1, _IS_ON_1)
AND
IntegerProduct(_IS_ON_1, 2, _LEVER_GUESS_VALUE_1)
AND
IntegerSum(_LEVER_GUESS_VALUE_0, _LEVER_GUESS_VALUE_1, _LEVER_GUESS_VALUE_0_1)
AND
DB_SMG_LGM_VAR_LEVER_SETTINGS(_ADDON_ID, 2, _IS_ON_2)
AND
IntegerProduct(_IS_ON_2, 4, _LEVER_GUESS_VALUE_2)
AND
IntegerSum(_LEVER_GUESS_VALUE_0_1, _LEVER_GUESS_VALUE_2, _LEVER_GUESS_VALUE)
AND
DB_SMG_LGM_VAR_LEVER_OPENER(_ADDON_ID, _OPEN_VALUE)
AND
_LEVER_GUESS_VALUE == _OPEN_VALUE
AND
DB_SMG_LGM_VAR_SLIDING_DOOR(_ADDON_ID, _SLIDING_DOOR)
THEN
PROC_ItemUnlockAndOpen(_SLIDING_DOOR);

IF
EntityEvent((GUIDSTRING)_PUZZLE_DOOR_GUID, "OPEN_WALL")
THEN
RequestDelete((ITEM)_PUZZLE_DOOR_GUID);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
