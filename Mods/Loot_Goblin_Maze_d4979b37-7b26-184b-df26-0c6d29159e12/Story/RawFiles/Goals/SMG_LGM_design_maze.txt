Version 1
SubGoalCombiner SGC_AND
INITSECTION
// constants
//// DB_SMG_LGM_CONST_DELTA_VISIT((STRING)_DIRECTION, (INTEGER)_DELTA_ROW, (INTEGER)_DELTA_COLUMN)
DB_SMG_LGM_CONST_DELTA_DIRECTION("N", +1, 0);
DB_SMG_LGM_CONST_DELTA_DIRECTION("S", -1, 0);
DB_SMG_LGM_CONST_DELTA_DIRECTION("E", 0, -1);
DB_SMG_LGM_CONST_DELTA_DIRECTION("W", 0, +1);
//// DB_SMG_LGM_CONST_INITIAL_CELL((INTEGER)INITIAL_ROW, (INTEGER)INITIAL_COLUMN)
DB_SMG_LGM_CONST_INITIAL_CELL(0, 0);

// variables
//// DB_SMG_LGM_VAR_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)TYPE, (INTEGER)_ID);
//// DB_SMG_LGM_VAR_ADDON_ROW((STRING)_DIRECTION, (INTEGER)_ROW);
//// DB_SMG_LGM_VAR_CHOSEN_CELL((INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_CURRENT_CELL((INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_MAZE_READY((INTEGER)_IS_MAZE_READY);
//// DB_SMG_LGM_VAR_MAZE_STARTED((INTEGER)_IS_MAZE_STARTED);
//// DB_SMG_LGM_VAR_PASSAGE((INTEGER)_ROW_1, (INTEGER)_COLUMN_1, (INTEGER)_ROW_2, (INTEGER)_COLUMN_2);
//// DB_SMG_LGM_VAR_STACK((INTEGER)_STACK_POINTER, (INTEGER)_ROW, (INTEGER)_COLUMN)
//// DB_SMG_LGM_VAR_STACK_POINTER((INTEGER)_STACK_POINTER);
//// DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_UNVISITED_NEIGHBOR_CELL_COUNT);
//// DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS((INTEGER)_INDEX, (INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_VISITED((INTEGER)_ROW, (INTEGER)_COLUMN);
//// DB_SMG_LGM_VAR_X_VALUES((INTEGER)_X);
//// DB_SMG_LGM_VAR_Z_VALUES((INTEGER)_Z);
KBSECTION
// This Baldur's Gate 3 mod will create a small maze and transport the
// player to the start of the maze. They can wander throught the maze and
// find random loot. When the player reaches the end of the maze,
// they are returned to their original spot.
// This uses a simple maze generation algorithm described in Wikipedia.

//////////////////////////////////////////////////////////////////////////////////////////////////////////
// https://en.wikipedia.org/wiki/Maze_generation_algorithm#Iterative_implementation_(with_stack)        //
//                                                                                                      //
// 1. Choose the initial cell, mark it as visited and push it to the stack                              //
// 2. While the stack is not empty                                                                      //
//     1. Pop a cell from the stack and make it a current cell                                          //
//     2. If the current cell has any neighbours which have not been visited                            //
//         1. Push the current cell to the stack                                                        //
//         2. Choose one of the unvisited neighbours                                                    //
//         3. Remove the wall between the current cell and the chosen cell                              //
//         4. Mark the chosen cell as visited and push it to the stack                                  //
//                                                                                                      //
//////////////////////////////////////////////////////////////////////////////////////////////////////////

// design the maze
PROC
PROC_SMG_LGM_DESIGN_MAZE()
AND
DB_SMG_LGM_CONST_INITIAL_CELL(_INITIAL_ROW, _INITIAL_COLUMN)
THEN
DB_SMG_LGM_VAR_STACK_POINTER(0);
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(0);
PROC_SMG_LGM_LOAD_LOOT_TABLE();
PROC_SMG_LGM_ROW_VALUES(-1);
PROC_SMG_LGM_COLUMN_VALUES(-1);
// 1. Choose the initial cell
DB_SMG_LGM_VAR_CURRENT_CELL(_INITIAL_ROW, _INITIAL_COLUMN);
//     mark it as visited
DB_SMG_LGM_VAR_VISITED(_INITIAL_ROW, _INITIAL_COLUMN);
//     and push it to the stack
PROC_SMG_LGM_PUSH_CELL_ON_STACK(_INITIAL_ROW, _INITIAL_COLUMN);
DB_SMG_LGM_VAR_Maze_Started(1);
// 2. While the stack is not empty
PROC_SMG_LGM_WHILE_STACK_IS_NOT_EMPTY();
PROC_SMG_LGM_PLACE_ADDONS();

// create a DB of all possible row values
PROC
PROC_SMG_LGM_ROW_VALUES((INTEGER)_ROW_LOOP)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _)
AND
IntegerSum(_ROW_LOOP, 1, _NEW_ROW_LOOP)
AND
_NEW_ROW_LOOP < _ROW_SIZE
THEN
DB_SMG_LGM_VAR_ROW_VALUES(_NEW_ROW_LOOP);
PROC_SMG_LGM_ROW_VALUES(_NEW_ROW_LOOP);

// create a DB of all possible column values
PROC
PROC_SMG_LGM_COLUMN_VALUES((INTEGER)_COLUMN_LOOP)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_, _, _COLUMN_SIZE)
AND
IntegerSum(_COLUMN_LOOP, 1, _NEW_COLUMN_LOOP)
AND
_NEW_COLUMN_LOOP < _COLUMN_SIZE
THEN
DB_SMG_LGM_VAR_COLUMN_VALUES(_NEW_COLUMN_LOOP);
PROC_SMG_LGM_COLUMN_VALUES(_NEW_COLUMN_LOOP);

// push a cell (x, z) on the stack
PROC
PROC_SMG_LGM_PUSH_CELL_ON_STACK((INTEGER)_ROW, (INTEGER)_COLUMN)
AND
DB_SMG_LGM_VAR_STACK_POINTER(_OLD_STACK_POINTER)
AND
IntegerSum(_OLD_STACK_POINTER, 1, _NEW_STACK_POINTER)
THEN
NOT DB_SMG_LGM_VAR_STACK_POINTER(_OLD_STACK_POINTER);
DB_SMG_LGM_VAR_STACK_POINTER(_NEW_STACK_POINTER);
DB_SMG_LGM_VAR_STACK(_NEW_STACK_POINTER, _ROW, _COLUMN);

// pull a cell (x, z) off the stack into DB_SMG_LGM_VAR_CURRENT_CELL
PROC
PROC_SMG_LGM_POP_CELL_FROM_STACK() 
AND
DB_SMG_LGM_VAR_STACK_POINTER(_OLD_STACK_POINTER)
AND
_OLD_STACK_POINTER > 0
AND
IntegerSubtract(_OLD_STACK_POINTER, 1, _NEW_STACK_POINTER)
AND
DB_SMG_LGM_VAR_STACK(_OLD_STACK_POINTER, _POPPED_ROW, _POPPED_COLUMN)
AND
DB_SMG_LGM_VAR_CURRENT_CELL(_OLD_CURRENT_ROW, _OLD_CURRENT_COLUMN)
THEN
NOT DB_SMG_LGM_VAR_STACK_POINTER(_OLD_STACK_POINTER);
DB_SMG_LGM_VAR_STACK_POINTER(_NEW_STACK_POINTER);
NOT DB_SMG_LGM_VAR_STACK(_OLD_STACK_POINTER, _POPPED_ROW, _POPPED_COLUMN);
NOT DB_SMG_LGM_VAR_CURRENT_CELL(_OLD_CURRENT_ROW, _OLD_CURRENT_COLUMN);
DB_SMG_LGM_VAR_CURRENT_CELL(_POPPED_ROW, _POPPED_COLUMN);

// recursive call to build the maze (_STACK_POINTER == 0 must come before _STACK_POINTER > 0)
PROC
PROC_SMG_LGM_WHILE_STACK_IS_NOT_EMPTY()
// 2. While the stack is not empty
AND
DB_SMG_LGM_VAR_Maze_Started(1)
AND
DB_SMG_LGM_VAR_STACK_POINTER(_STACK_POINTER)
AND
_STACK_POINTER == 0
THEN
DB_SMG_LGM_VAR_MAZE_READY(1);
PROC_SMG_LGM_CHECK_CONSTRUCT_MAZE();

// recursive call to build the maze
PROC
PROC_SMG_LGM_WHILE_STACK_IS_NOT_EMPTY()
// 2. While the stack is not empty
AND
DB_SMG_LGM_VAR_Maze_Started(1)
AND
DB_SMG_LGM_VAR_STACK_POINTER(_STACK_POINTER)
AND
_STACK_POINTER > 0
THEN
//     1. Pop a cell from the stack and make it a current cell
PROC_SMG_LGM_POP_CELL_FROM_STACK();
//     2. If the current cell has any neighbours which have not been visited
PROC_SMG_LGM_CHECK_UNVISITED_NEIGHBOR_CELLS();
PROC_SMG_LGM_IF_CURRENT_CELL_UNVISITED_NEIGHBORS();
// 2. While the stack is not empty
PROC_SMG_LGM_WHILE_STACK_IS_NOT_EMPTY();

//     2. If the current cell has any neighbours which have not been visited
PROC
PROC_SMG_LGM_IF_CURRENT_CELL_UNVISITED_NEIGHBORS()
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_UNVISITED_NEIGHBOR_CELL_COUNT)
AND
_UNVISITED_NEIGHBOR_CELL_COUNT > 0
AND
DB_SMG_LGM_VAR_CURRENT_CELL(_CURRENT_ROW, _CURRENT_COLUMN)
THEN
//         1. Push the current cell to the stack
PROC_SMG_LGM_PUSH_CELL_ON_STACK(_CURRENT_ROW, _CURRENT_COLUMN);
//         2. Choose one of the unvisited neighbours
PROC_SMG_LGM_CHOOSE_ONE_OF_THE_UNVISITED_NEIGHBOURS();
//         3. Remove the wall between the current cell and the chosen cell
PROC_SMG_LGM_REMOVE_WALL_BETWEEN_CURRENT_AND_CHOSEN();
//         4. Mark the chosen cell as visited and push it to the stack
PROC_SMG_LGM_MARK_CHOSEN_CELL_VISITED_AND_PUSH_ON_STACK();

// remove the chosen neighbor, and move all the other neighbors down, in a recursive loop
PROC
PROC_SMG_LGM_REMOVE_VISITED_NEIGHBORS((INTEGER)_LOOP)
AND
IntegerSum(_LOOP, 1, _NEXT)
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_UNVISITED_NEIGHBOR_CELL_COUNT)
AND
_NEXT <= _UNVISITED_NEIGHBOR_CELL_COUNT
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_LOOP, _LOOP_NEIGHBOR_CELL_ROW, _LOOP_NEIGHBOR_CELL_COLUMN)
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_NEXT, _NEXT_NEIGHBOR_CELL_ROW, _NEXT_NEIGHBOR_CELL_COLUMN)
THEN
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_LOOP, _LOOP_NEIGHBOR_CELL_ROW, _LOOP_NEIGHBOR_CELL_COLUMN);
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_NEXT, _NEXT_NEIGHBOR_CELL_ROW, _NEXT_NEIGHBOR_CELL_COLUMN);
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_LOOP, _NEXT_NEIGHBOR_CELL_ROW, _NEXT_NEIGHBOR_CELL_COLUMN);
PROC_SMG_LGM_REMOVE_VISITED_NEIGHBORS(_NEXT);

PROC
PROC_SMG_LGM_CHOOSE_ONE_OF_THE_UNVISITED_NEIGHBOURS()
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT)
//         2. Choose one of the unvisited neighbours
AND
Random(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT, _INDEX)
AND
IntegerSubtract(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT, 1, _NEW_UNVISITED_NEIGHBOR_CELL_COUNT)
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_INDEX, _CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN)
THEN
DB_SMG_LGM_VAR_CHOSEN_CELL(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN);
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_NEW_UNVISITED_NEIGHBOR_CELL_COUNT);
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT);
PROC_SMG_LGM_REMOVE_VISITED_NEIGHBORS(_INDEX);

//         3. Remove the wall between the current cell and the chosen cell
PROC
PROC_SMG_LGM_REMOVE_WALL_BETWEEN_CURRENT_AND_CHOSEN()
AND
DB_SMG_LGM_VAR_CURRENT_CELL(_CURRENT_ROW, _CURRENT_COLUMN)
AND
DB_SMG_LGM_VAR_CHOSEN_CELL(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN)
THEN
PROC_SMG_LGM_CREATE_PASSAGE(_CURRENT_ROW, _CURRENT_COLUMN, _CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN);

PROC
PROC_SMG_LGM_MARK_CHOSEN_CELL_VISITED_AND_PUSH_ON_STACK()
AND
DB_SMG_LGM_VAR_CHOSEN_CELL(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN)
THEN
DB_SMG_LGM_VAR_VISITED(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN);
PROC_SMG_LGM_PUSH_CELL_ON_STACK(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN);
NOT DB_SMG_LGM_VAR_CHOSEN_CELL(_CHOSEN_NEIGHBOR_CELL_ROW, _CHOSEN_NEIGHBOR_CELL_COLUMN);

// zero out the neighbor cell count
PROC
PROC_SMG_LGM_CLEAR_UNVISITED_NEIGHBOR_CELL_COUNT()
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_UNVISITED_NEIGHBOR_CELL_COUNT)
THEN
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_UNVISITED_NEIGHBOR_CELL_COUNT);
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(0);

// empty out the DB of neighbor cells
PROC
PROC_SMG_LGM_CLEAR_UNVISITED_NEIGHBOR_CELLS()
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_INDEX, _NEIGHBOR_CELL_ROW, _NEIGHBOR_CELL_COLUMN)
THEN
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_INDEX, _NEIGHBOR_CELL_ROW, _NEIGHBOR_CELL_COLUMN);

// get all unvisited neighbors of the current cell
PROC
PROC_SMG_LGM_GET_UNVISITED_NEIGHBOR_CELLS()
AND
DB_SMG_LGM_CONST_DELTA_DIRECTION(_DIRECTION, _DELTA_ROW, _DELTA_COLUMN)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
DB_SMG_LGM_VAR_CURRENT_CELL(_CURRENT_ROW, _CURRENT_COLUMN)
AND
IntegerSum(_CURRENT_ROW, _DELTA_ROW, _ROW)
AND
IntegerSum(_CURRENT_COLUMN, _DELTA_COLUMN, _COLUMN)
AND
_ROW >= 0
AND
_ROW < _ROW_SIZE
AND
_COLUMN >= 0
AND
_COLUMN < _COLUMN_SIZE
AND
NOT DB_SMG_LGM_VAR_VISITED(_ROW, _COLUMN)
AND
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT)
AND
IntegerSum(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT, 1, _NEW_UNVISITED_NEIGHBOR_CELL_COUNT)
THEN
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELLS(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT, _ROW, _COLUMN);
NOT DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_OLD_UNVISITED_NEIGHBOR_CELL_COUNT);
DB_SMG_LGM_VAR_UNVISITED_NEIGHBOR_CELL_COUNT(_NEW_UNVISITED_NEIGHBOR_CELL_COUNT);

PROC
PROC_SMG_LGM_CHECK_UNVISITED_NEIGHBOR_CELLS()
THEN
PROC_SMG_LGM_CLEAR_UNVISITED_NEIGHBOR_CELL_COUNT();
PROC_SMG_LGM_CLEAR_UNVISITED_NEIGHBOR_CELLS();
PROC_SMG_LGM_GET_UNVISITED_NEIGHBOR_CELLS();

PROC
PROC_SMG_LGM_CREATE_PASSAGE((INTEGER)_ROW_1, (INTEGER)_COLUMN_1, (INTEGER)_ROW_2, (INTEGER)_COLUMN_2)
AND
IntegerMin(_ROW_1, _ROW_2, _MIN_ROW)
AND
IntegerMax(_ROW_1, _ROW_2, _MAX_ROW)
AND
IntegerMin(_COLUMN_1, _COLUMN_2, _MIN_COLUMN)
AND
IntegerMax(_COLUMN_1, _COLUMN_2, _MAX_COLUMN)
THEN
DB_SMG_LGM_VAR_PASSAGE(_MIN_ROW, _MIN_COLUMN, _MAX_ROW, _MAX_COLUMN);

PROC
PROC_SMG_LGM_PLACE_ADDONS()
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
IntegerSubtract(_ROW_SIZE, 1, _ROW_SIZE_MINUS_1)
AND
IntegerSubtract(_COLUMN_SIZE, 1, _COLUMN_SIZE_MINUS_1)
THEN
//DB_SMG_LGM_VAR_ADDON(0, -1, "W", "SCROLL", 99);
//DB_SMG_LGM_VAR_ADDON(_X_SIZE_MINUS_1, _Z_SIZE, "E", "POTION", 999);
DB_SMG_LGM_VAR_ADDON(-1, 0, "N", "TERMINAL", 0);
DB_SMG_LGM_VAR_ADDON(_ROW_SIZE, _COLUMN_SIZE_MINUS_1, "S", "TERMINAL", 1);

PROC
PROC_SMG_LGM_PLACE_ADDON((INTEGER)_COUNTER, (STRING)_DIRECTION, (INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_TYPE)
AND
Random(7, _RANDOM_KEY)
AND
IntegerSum(_RANDOM_KEY, 1, _KEY)
THEN
DB_SMG_LGM_VAR_LEVER_OPENER(_COUNTER, _KEY); // key = random integer 1 to 7
DB_SMG_LGM_VAR_ADDON(_ROW, _COLUMN, _DIRECTION, _TYPE, _COUNTER);

PROC
PROC_SMG_LGM_PLACE_ADDONS()
AND
DB_SMG_LGM_VAR_LOOT_LEVEL(1)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
IntegerSubtract(_ROW_SIZE, 2, _ROW_2_RANGE)
AND
Random(_ROW_2_RANGE, _RANDOM_ROW_1_W)
AND
IntegerSum(_RANDOM_ROW_1_W, 1, _ROW_W)
AND
Random(_ROW_2_RANGE, _RANDOM_ROW_1_E)
AND
IntegerSum(_RANDOM_ROW_1_E, 1, _ROW_E)
AND
IntegerSubtract(_COLUMN_SIZE, 2, _COLUMN_2_RANGE)
AND
Random(_COLUMN_2_RANGE, _RANDOM_COLUMN_1_N)
AND
IntegerSum(_RANDOM_COLUMN_1_N, 1, _COLUMN_N)
AND
Random(_COLUMN_2_RANGE, _RANDOM_COLUMN_1_S)
AND
IntegerSum(_RANDOM_COLUMN_1_S, 1, _COLUMN_S)
THEN
PROC_SMG_LGM_PLACE_ADDON(2, "W", _ROW_W, -1, "LEVER");
PROC_SMG_LGM_PLACE_ADDON(3, "E", _ROW_E, _COLUMN_SIZE, "LEVER");
PROC_SMG_LGM_PLACE_ADDON(4, "N", -1, _COLUMN_N, "BUTTON");
PROC_SMG_LGM_PLACE_ADDON(5, "S", _ROW_SIZE, _COLUMN_S, "BUTTON");

PROC
PROC_SMG_LGM_PLACE_ADDONS()
AND
DB_SMG_LGM_VAR_LOOT_LEVEL(2)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
IntegerDivide(_ROW_SIZE, 2, _HALF_ROW_SIZE)
AND
IntegerModulo(_ROW_SIZE, 2, _ROW_SIZE_MODULO)
AND
IntegerSum(_HALF_ROW_SIZE, _ROW_SIZE_MODULO, _HALF_ROW_START)
AND
IntegerSubtract(_HALF_ROW_SIZE, 2, _HALF_ROW_RANGE)
AND
Random(_HALF_ROW_RANGE, _FIRST_HALF_ROW_W_1)
AND
IntegerSum(_FIRST_HALF_ROW_W_1, 1, _FIRST_HALF_ROW_W)
AND
Random(_HALF_ROW_RANGE, _LAST_HALF_ROW_W_1)
AND
IntegerSum(_HALF_ROW_START, _LAST_HALF_ROW_W_1, _LAST_HALF_ROW_W_2)
AND
IntegerSum(_LAST_HALF_ROW_W_2, 1, _LAST_HALF_ROW_W)
AND
Random(_HALF_ROW_RANGE, _FIRST_HALF_ROW_E_1)
AND
IntegerSum(_FIRST_HALF_ROW_E_1, 1, _FIRST_HALF_ROW_E)
AND
Random(_HALF_ROW_RANGE, _LAST_HALF_ROW_E_1)
AND
IntegerSum(_HALF_ROW_START, _LAST_HALF_ROW_E_1, _LAST_HALF_ROW_E_2)
AND
IntegerSum(_LAST_HALF_ROW_E_2, 1, _LAST_HALF_ROW_E)
THEN
PROC_SMG_LGM_PLACE_ADDON(2, "W", _FIRST_HALF_ROW_W, -1, "LEVER");
PROC_SMG_LGM_PLACE_ADDON(3, "W", _LAST_HALF_ROW_W, -1, "LEVER");
PROC_SMG_LGM_PLACE_ADDON(4, "E", _FIRST_HALF_ROW_E, _COLUMN_SIZE, "LEVER");
PROC_SMG_LGM_PLACE_ADDON(5, "E", _LAST_HALF_ROW_E, _COLUMN_SIZE, "LEVER");

PROC
PROC_SMG_LGM_PLACE_ADDONS()
AND
DB_SMG_LGM_VAR_LOOT_LEVEL(2)
AND
DB_SMG_LGM_VAR_DIMENSIONS(_ROW_SIZE, _, _COLUMN_SIZE)
AND
IntegerDivide(_COLUMN_SIZE, 2, _HALF_COLUMN_SIZE)
AND
IntegerModulo(_COLUMN_SIZE, 2, _COLUMN_SIZE_MODULO)
AND
IntegerSum(_HALF_COLUMN_SIZE, _COLUMN_SIZE_MODULO, _HALF_COLUMN_START)
AND
IntegerSubtract(_HALF_COLUMN_SIZE, 2, _HALF_COLUMN_RANGE)
AND
Random(_HALF_COLUMN_RANGE, _FIRST_HALF_COLUMN_N_1)
AND
IntegerSum(_FIRST_HALF_COLUMN_N_1, 1, _FIRST_HALF_COLUMN_N)
AND
Random(_HALF_COLUMN_RANGE, _LAST_HALF_COLUMN_N_1)
AND
IntegerSum(_HALF_COLUMN_START, _LAST_HALF_COLUMN_N_1, _LAST_HALF_COLUMN_N_2)
AND
IntegerSum(_LAST_HALF_COLUMN_N_2, 1, _LAST_HALF_COLUMN_N)
AND
Random(_HALF_COLUMN_RANGE, _FIRST_HALF_COLUMN_S_1)
AND
IntegerSum(_FIRST_HALF_COLUMN_S_1, 1, _FIRST_HALF_COLUMN_S)
AND
Random(_HALF_COLUMN_RANGE, _LAST_HALF_COLUMN_S_1)
AND
IntegerSum(_HALF_COLUMN_START, _LAST_HALF_COLUMN_S_1, _LAST_HALF_COLUMN_S_2)
AND
IntegerSum(_LAST_HALF_COLUMN_S_2, 1, _LAST_HALF_COLUMN_S)
THEN
PROC_SMG_LGM_PLACE_ADDON(6, "N", -1, _FIRST_HALF_COLUMN_N, "BUTTON");
PROC_SMG_LGM_PLACE_ADDON(7, "N", -1, _LAST_HALF_COLUMN_N, "BUTTON");
PROC_SMG_LGM_PLACE_ADDON(8, "S", _ROW_SIZE, _FIRST_HALF_COLUMN_S, "BUTTON");
PROC_SMG_LGM_PLACE_ADDON(9, "S", _ROW_SIZE, _LAST_HALF_COLUMN_S, "BUTTON");
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
