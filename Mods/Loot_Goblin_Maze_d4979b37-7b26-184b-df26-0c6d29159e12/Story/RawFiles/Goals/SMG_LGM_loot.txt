Version 1
SubGoalCombiner SGC_AND
INITSECTION
// constants

//// DB_SMG_LGM_CONST_LOOT_ODDS((INTEGER)_ODDS, (GUIDSTRING)_GUID) - ODDS are out of 100
DB_SMG_LGM_CONST_LOOT_ODDS(01,5961d027-75fd-4ad7-964c-8b786b5839fb); // MAG_TheCrimson_Shortsword
DB_SMG_LGM_CONST_LOOT_ODDS(01,f5f8c72b-c823-4106-a70a-5a4522bb5426); // gold pile big
DB_SMG_LGM_CONST_LOOT_ODDS(01,84da5549-abc9-4d98-827b-11ccb3214027); // chest 1
DB_SMG_LGM_CONST_LOOT_ODDS(02,af13e55e-c696-4e53-8f1b-96790e751a35); // basket 1
DB_SMG_LGM_CONST_LOOT_ODDS(02,c82d456f-2b94-4350-9ab3-a6dc73a57b35); // chest 2
DB_SMG_LGM_CONST_LOOT_ODDS(03,4d200abd-89d0-46f9-8a14-fd31e9cf68a9); // chest 3
DB_SMG_LGM_CONST_LOOT_ODDS(03,5ece6a8d-e5f3-4b34-878f-ff14785d23d6); // gold pile medium
DB_SMG_LGM_CONST_LOOT_ODDS(05,55524c47-c62f-45ac-8505-426cb04707c9); // LOOT_GEM_Topaz_A
DB_SMG_LGM_CONST_LOOT_ODDS(05,ee6309db-5347-435c-94d8-a84f5996ea56); // LOOT_GEN_Amulet_Necklace_C_Gold_A
DB_SMG_LGM_CONST_LOOT_ODDS(05,067f4e39-a2b0-42ff-88dc-a9eb3614cf4d); // gold pile small
DB_SMG_LGM_CONST_LOOT_ODDS(05,a94ac1cd-96c9-4775-8dcd-c2b581bfeb50); // LOOT_Dye_Blue_01
DB_SMG_LGM_CONST_LOOT_ODDS(05,0316f0b1-1309-44d5-ba28-b9e41ab3175d); // SMG_LGM_DEAD_BASE_Cambion_Female
DB_SMG_LGM_CONST_LOOT_ODDS(05,759b3d58-b58c-4bda-bbd5-5b6095c92eaf); // SMG_LGM_DEAD_Bugbears_Male
DB_SMG_LGM_CONST_LOOT_ODDS(05,d819c472-e408-4022-a251-c51f87a946dd); // SMG_LGM_DEAD_Drider
DB_SMG_LGM_CONST_LOOT_ODDS(05,82334079-0fb2-4ab0-9931-fdc13d8f0c86); // SMG_LGM_DEAD_Goblins_Female_Guard
DB_SMG_LGM_CONST_LOOT_ODDS(05,001d6147-8de3-461a-8a18-73e7cdc4ffc2); // SMG_LGM_DEAD_Goblins_Male_Caster
DB_SMG_LGM_CONST_LOOT_ODDS(05,f18b64c8-d267-44a3-81eb-01551a722612); // SMG_LGM_DEAD_Hobgoblins_Male
DB_SMG_LGM_CONST_LOOT_ODDS(20,2c1541b5-18f9-4638-964b-6880e4f38bd6); // LOOT_GEN_Bowl_Wooden_A
DB_SMG_LGM_CONST_LOOT_ODDS(20,a267d4bb-142b-4095-8708-e0b3a1b844f8); // LOOT_GEN_Toy_TeddyBear_E
DB_SMG_LGM_CONST_LOOT_ODDS(20,d8fff9cf-05b9-4aeb-b5b4-0f6bb98b7f2c); // CONS_Drink_Water_Bottle_A
DB_SMG_LGM_CONST_LOOT_ODDS(20,9a94a73b-8a0f-4a06-a83b-39350094a57a); // LOOT_Bathroom_Towel_A
DB_SMG_LGM_CONST_LOOT_ODDS(20,e13facc6-aced-4b48-b239-b0e76448013f); // toy shield
//// DB_SMG_LGM_VAR_LOOT_MAX((INTEGER)_MAX); // max of loot random selection
DB_SMG_LGM_VAR_LOOT_MAX(200); // max of loot random selection
//// DB_SMG_LGM_CONST_LOOT_START_INDEX((INTEGER)_LOOT_LEVEL, (INTEGER)_START_INDEX
DB_SMG_LGM_CONST_LOOT_START_INDEX(1, 5); // basic scroll - start loot index 5
DB_SMG_LGM_CONST_LOOT_START_INDEX(2, 0); // epic scroll - start loot index 0
//// DB_SMG_LGM_CONST_LOOT_GOLD_PILE((INTEGER)_GOLD_PILE_SIZE, (STRING)_PREFIX)
DB_SMG_LGM_CONST_LOOT_GOLD_PILE(1, "SMG_LGM_GOLD_PILE_SMALL");
DB_SMG_LGM_CONST_LOOT_GOLD_PILE(2, "SMG_LGM_GOLD_PILE_MEDIUM");
DB_SMG_LGM_CONST_LOOT_GOLD_PILE(3, "SMG_LGM_GOLD_PILE_BIG");
//// DB_SMG_LGM_CONST_LOOT_GOLD_AMOUNT((INTEGER)_GOLD_PILE_SIZE, (INTEGER)_AMOUNT);
DB_SMG_LGM_CONST_LOOT_GOLD_AMOUNT(1, 5);
DB_SMG_LGM_CONST_LOOT_GOLD_AMOUNT(2, 50);
DB_SMG_LGM_CONST_LOOT_GOLD_AMOUNT(3, 500);
//// DB_SMG_LGM_CONST_TYPE_LOOT((STRING)_TYPE);
DB_SMG_LGM_CONST_TYPE_LOOT("LEVER");
DB_SMG_LGM_CONST_TYPE_LOOT("BUTTON");

DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  0, 0.43, 0.1, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  1, 0.43, 0.25, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  2, 0.43, 0.4, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  3, 0.43, 0.55, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  4, 0.0, 0.1, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  5, 0.0, 0.25, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  6, 0.0, 0.4, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  7, 0.0, 0.55, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  8, -0.43, 0.1, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W",  9, -0.43, 0.25, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W", 10, -0.43, 0.4, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("W", 11, -0.43, 0.55, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  0, 0.43, 0.1, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  1, 0.43, 0.25, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  2, 0.43, 0.4, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  3, 0.43, 0.55, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  4, 0.0, 0.1, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  5, 0.0, 0.25, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  6, 0.0, 0.4, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  7, 0.0, 0.55, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  8, -0.43, 0.1, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E",  9, -0.43, 0.25, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E", 10, -0.43, 0.4, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("E", 11, -0.43, 0.55, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  0, 0.0, 0.1, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  1, 0.0, 0.25, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  2, 0.0, 0.4, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  3, 0.0, 0.55, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  4, -0.43, 0.1, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  5, -0.43, 0.25, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  6, -0.43, 0.4, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  7, -0.43, 0.55, 0.0, 3);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  8, 0.0, 0.1, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N",  9, 0.0, 0.25, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N", 10, 0.0, 0.4, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("N", 11, 0.0, 0.55, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  0, 0.0, 0.1, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  1, 0.0, 0.25, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  2, 0.0, 0.4, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  3, 0.0, 0.55, 0.43, 0);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  4, 0.43, 0.1, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  5, 0.43, 0.25, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  6, 0.43, 0.4, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  7, 0.43, 0.55, 0.0, 1);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  8, 0.0, 0.1, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S",  9, 0.0, 0.25, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S", 10, 0.0, 0.4, -0.43, 2);
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT("S", 11, 0.0, 0.55, -0.43, 2);

DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(0, 0, -0.15, 0.04, -0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(0, 1, 0.0, 0.04, -0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(0, 2, 0.15, 0.04, -0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(1, 0, -0.05, 0.04, -0.15);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(1, 1, -0.05, 0.04, 0.0);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(1, 2, -0.05, 0.04, 0.15);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(2, 0, -0.15, 0.04, 0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(2, 1, 0.0, 0.04, 0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(2, 2, 0.15, 0.04, 0.05);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(3, 0, 0.05, 0.04, -0.15);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(3, 1, 0.05, 0.04, 0.0);
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(3, 2, 0.05, 0.04, 0.15);


DB_SMG_LGM_CONST_CRATE_HEIGHT(0.107);

//16afba1f-58e1-46b7-9e6d-75e43ff0da41 // shelf

// variables
//// DB_SMG_LGM_VAR_LOOT((INTEGER)_INDEX, (INTEGER)_COUNTER, (GUIDSTRING)_GUID)
//// DB_SMG_LGM_VAR_LOOT_COUNTER((INTEGER)_COUNTER)
//// DB_SMG_LGM_VAR_LOOT_INDEX((INTEGER)_INDEX)
//// DB_SMG_LGM_VAR_SELECTED_LOOT((GUID)_GUID);
KBSECTION
// This Baldur's Gate 3 mod will create a small maze and transport the
// player to the start of the maze. They can wander throught the maze and
// find random loot. When the player reaches the end of the maze,
// they are returned to their original spot.

// PROCESS LOOT

// load loot table
PROC
PROC_SMG_LGM_LOAD_LOOT_TABLE()
THEN
DB_SMG_LGM_VAR_LOOT_INDEX(0);
DB_SMG_LGM_VAR_LOOT_COUNTER(0);
PROC_SMG_LGM_NEXT_LOOT_TABLE();

PROC
PROC_SMG_LGM_NEXT_LOOT_TABLE()
AND
DB_SMG_LGM_CONST_LOOT_ODDS(_ODDS, _GUID)
AND
DB_SMG_LGM_VAR_LOOT_INDEX(_INDEX)
AND
IntegerSum(_INDEX, 1, _NEXT_INDEX)
AND
DB_SMG_LGM_VAR_LOOT_COUNTER(_COUNTER)
AND
IntegerSum(_COUNTER, _ODDS, _NEXT_COUNTER)
THEN
DB_SMG_LGM_VAR_LOOT(_INDEX, _NEXT_COUNTER, _GUID);
NOT DB_SMG_LGM_VAR_LOOT_INDEX(_INDEX);
DB_SMG_LGM_VAR_LOOT_INDEX(_NEXT_INDEX);
NOT DB_SMG_LGM_VAR_LOOT_COUNTER(_COUNTER);
DB_SMG_LGM_VAR_LOOT_COUNTER(_NEXT_COUNTER);

// if player picks up a gold pile, add it to their gold count and delete the pile
IF
AddedTo((GUIDSTRING)_GUIDstring,(CHARACTER)_Player, "Regular")
AND
GUIDToString(_GUIDstring, _Result)
AND
Substring(_Result, 0, 25, _Object_Name)
AND
DB_SMG_LGM_CONST_LOOT_GOLD_PILE(_GOLD_PILE_SIZE, _Object_Name)
AND
DB_SMG_LGM_CONST_LOOT_GOLD_AMOUNT(_GOLD_PILE_SIZE, _AMOUNT)
THEN
AddGold((GUIDSTRING)_Player, _AMOUNT);
RequestDelete((ITEM)_GUIDstring);

// place random loot (maybe nothing) in the cell
PROC
PROC_SMG_LGM_CONSTRUCT_CELL((INTEGER)_ROW, (INTEGER)_COLUMN)
AND
DB_SMG_LGM_VAR_LOOT_MAX(_LOOT_MAX)
AND
DB_SMG_LGM_VAR_LOOT_LEVEL(_LOOT_LEVEL)
AND
DB_SMG_LGM_CONST_LOOT_START_INDEX(_LOOT_LEVEL, _START_INDEX)
AND
IntegerSubtract(_LOOT_MAX, _START_INDEX, _LOOT_LEVEL_LOOT_MAX)
AND
Random(_LOOT_LEVEL_LOOT_MAX, _LOOT_RANDOM)
AND
Random(5, _SUPPORT_RANDOM)
THEN
DB_SMG_LGM_VAR_SELECTED_LOOT(00000000-0000-0000-0000-111111111111); // dummy
PROC_SMG_LGM_NEXT_LOOT(_START_INDEX, _LOOT_RANDOM);
PROC_SMG_LGM_PLACE_LOOT(_ROW, _COLUMN, _SUPPORT_RANDOM);

// loop through loot for random int
PROC
PROC_SMG_LGM_NEXT_LOOT((INTEGER)_INDEX, (INTEGER)_LOOT_RANDOM)
AND
DB_SMG_LGM_VAR_LOOT(_INDEX, _RARITY, _GUID)
AND
_LOOT_RANDOM >= _RARITY
AND
IntegerSum(_INDEX, 1, _NEW_INDEX)
AND
DB_SMG_LGM_VAR_SELECTED_LOOT(_OLD_GUID)
THEN
NOT DB_SMG_LGM_VAR_SELECTED_LOOT(_OLD_GUID);
DB_SMG_LGM_VAR_SELECTED_LOOT(_GUID);
PROC_SMG_LGM_NEXT_LOOT(_NEW_INDEX, _LOOT_RANDOM);

// loop through loot for random int
PROC
PROC_SMG_LGM_NEXT_LOOT((INTEGER)_INDEX, (INTEGER)_LOOT_RANDOM)
AND
NOT DB_SMG_LGM_VAR_LOOT(_INDEX, _, _)
AND
DB_SMG_LGM_VAR_SELECTED_LOOT(_OLD_GUID)
THEN
NOT DB_SMG_LGM_VAR_SELECTED_LOOT(_OLD_GUID);

// place selected loot in the cell
PROC
PROC_SMG_LGM_PLACE_LOOT((INTEGER)_ROW, (INTEGER)_COLUMN, (INTEGER)_SUPPORT_RANDOM)
AND
_SUPPORT_RANDOM == 0
AND
DB_SMG_LGM_VAR_SELECTED_LOOT(_GUID)
AND
DB_SMG_LGM_CONST_CRATE_HEIGHT(_CRATE_HEIGHT)
THEN
PROC_SMG_LGM_ADD_PART("CRATE", _ROW, _COLUMN, 0);
PROC_SMG_LGM_ADD_OBJECT(_GUID, 0.0, _ROW, _COLUMN, 0, 0, 0.0, _CRATE_HEIGHT, 0.0);
NOT DB_SMG_LGM_VAR_SELECTED_LOOT(_GUID);

// place selected loot in the cell
PROC
PROC_SMG_LGM_PLACE_LOOT((INTEGER)_ROW, (INTEGER)_COLUMN, (INTEGER)_SUPPORT_RANDOM)
AND
_SUPPORT_RANDOM > 0
AND
DB_SMG_LGM_VAR_SELECTED_LOOT(_GUID)
THEN
PROC_SMG_LGM_ADD_OBJECT(_GUID, 0.0, _ROW, _COLUMN, 0, 0, 0.0, 0.0, 0.0);
NOT DB_SMG_LGM_VAR_SELECTED_LOOT(_GUID);

PROC
PROC_SMG_LGM_CREATE_ADDON((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (STRING)_TYPE, (INTEGER)_ADDON_ID)
AND
DB_SMG_LGM_CONST_TYPE_LOOT(_TYPE)
AND
DB_SMG_LGM_CONST_ADDON_ROTATION(_COMPASS_DIRECTION, _ADDON_ROTATION)
AND
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT(_COMPASS_DIRECTION, 0, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT, _SHELF_ROTATION)
AND
IntegerSubtract(_COLUMN, 1, _COLUMN_MINUS_1)
AND
IntegerSum(_COLUMN, 1, _COLUMN_PLUS_1)
THEN
PROC_ADDON_ADD_SHELVES(_ROW, _COLUMN, _COMPASS_DIRECTION, 0, 12);

PROC
PROC_ADDON_ADD_SHELVES((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (INTEGER)_INDEX, (INTEGER)_MAX)
AND
_INDEX < _MAX
AND
IntegerSum(_INDEX, 1, _NEW_INDEX)
THEN
PROC_ADDON_ADD_SHELF(_ROW, _COLUMN, _COMPASS_DIRECTION, _INDEX);
PROC_ADDON_ADD_SHELVES(_ROW, _COLUMN, _COMPASS_DIRECTION, _NEW_INDEX, _MAX);

PROC
PROC_ADDON_ADD_SHELF((INTEGER)_ROW, (INTEGER)_COLUMN, (STRING)_COMPASS_DIRECTION, (INTEGER)_INDEX)
AND
Random(2, _SHELF_BOOL)
AND
_SHELF_BOOL == 0
AND
DB_SMG_LGM_CONST_ADDON_SHELF_DISPLACEMENT(_COMPASS_DIRECTION, _INDEX, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT, _SHELF_ROTATION)
THEN
PROC_SMG_LGM_ADD_PART("SHELF", _ROW, _COLUMN, 0, _SHELF_ROTATION, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT);
PROC_SMG_LGM_ADDON_ADD_LOOT(_ROW, _COLUMN, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT, _SHELF_ROTATION, 0, 55524c47-c62f-45ac-8505-426cb04707c9);
PROC_SMG_LGM_ADDON_ADD_LOOT(_ROW, _COLUMN, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT, _SHELF_ROTATION, 1, 55524c47-c62f-45ac-8505-426cb04707c9);
PROC_SMG_LGM_ADDON_ADD_LOOT(_ROW, _COLUMN, _X_SHELF_DISPLACEMENT, _Y_SHELF_DISPLACEMENT, _Z_SHELF_DISPLACEMENT, _SHELF_ROTATION, 2, 55524c47-c62f-45ac-8505-426cb04707c9);

PROC
PROC_SMG_LGM_ADDON_ADD_LOOT((INTEGER)_ROW, (INTEGER)_COLUMN, (REAL)_X_SHELF_DISPLACEMENT, (REAL)_Y_SHELF_DISPLACEMENT, (REAL)_Z_SHELF_DISPLACEMENT, (INTEGER)_SHELF_ROTATION, (INTEGER)_ADDON_LOOT_INDEX, (GUIDSTRING)_GUID)
AND
DB_SMG_LGM_CONST_ADDON_LOOT_DISPLACEMENT(_SHELF_ROTATION, _ADDON_LOOT_INDEX, _X_LOOT_DISPLACEMENT, _Y_LOOT_DISPLACEMENT, _Z_LOOT_DISPLACEMENT)
AND
RealSum(_X_SHELF_DISPLACEMENT, _X_LOOT_DISPLACEMENT, _X_DISPLACEMENT)
AND
RealSum(_Y_SHELF_DISPLACEMENT, _Y_LOOT_DISPLACEMENT, _Y_DISPLACEMENT)
AND
RealSum(_Z_SHELF_DISPLACEMENT, _Z_LOOT_DISPLACEMENT, _Z_DISPLACEMENT)
THEN
//PROC_SMG_LGM_ADD_OBJECT((GUIDSTRING)_GUID, (REAL)_XZ_Offset_BOOL_REAL, (INTEGER)_Row, (INTEGER)_Column, (INTEGER)_Storey, (INTEGER)_Rotate, (REAL)_X_DISPLACEMENT, (REAL)_Y_DISPLACEMENT, (REAL)_Z_DISPLACEMENT)

PROC_SMG_LGM_ADD_OBJECT(_GUID, 0.0, _ROW, _COLUMN, 0, 0, _X_DISPLACEMENT, _Y_DISPLACEMENT, _Z_DISPLACEMENT);

//PROC_SMG_LGM_ADD_PART("SHELF", _ROW, _COLUMN, 0, _ADDON_REVERSE_ROTATION, 0.0, _Y_SHELF_1_DISPLACEMENT, _Z_SHELF_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(3f737706-57ca-45e6-b0d1-45238da76329, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_1, _Y_SCROLL_DISPLACEMENT_1, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(3f737706-57ca-45e6-b0d1-45238da76329, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_2, _Y_SCROLL_DISPLACEMENT_1, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(9a2a3fcc-d948-4463-b88b-a9d61b77b015, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_3, _Y_SCROLL_DISPLACEMENT_1, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(7f39977f-bcab-4dda-933f-bd70cb333ecc, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_4, _Y_SCROLL_DISPLACEMENT_1, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(7f39977f-bcab-4dda-933f-bd70cb333ecc, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_5, _Y_SCROLL_DISPLACEMENT_1, _Z_SCROLL_DISPLACEMENT);

//PROC_SMG_LGM_ADD_PART("SHELF", _ROW, _COLUMN, 0, _ADDON_REVERSE_ROTATION, 0.0, _Y_SHELF_2_DISPLACEMENT, _Z_SHELF_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(82719943-71e0-4eb2-bc4f-c8c0dd02c47c, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_1, _Y_SCROLL_DISPLACEMENT_2, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(82719943-71e0-4eb2-bc4f-c8c0dd02c47c, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_2, _Y_SCROLL_DISPLACEMENT_2, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(82cbfcd2-cf80-4acd-9f1f-51835693b0e6, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_3, _Y_SCROLL_DISPLACEMENT_2, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(e7dc56bc-b169-4a46-b8ee-cc6474dd7b15, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_4, _Y_SCROLL_DISPLACEMENT_2, _Z_SCROLL_DISPLACEMENT);
//PROC_SMG_LGM_PLACE_LOOT(e7dc56bc-b169-4a46-b8ee-cc6474dd7b15, _ROW, _COLUMN, _X_SCROLL_DISPLACEMENT_5, _Y_SCROLL_DISPLACEMENT_2, _Z_SCROLL_DISPLACEMENT);

// do not remove any loot picked up by the player
IF
AddedTo(_Item, _Player, "Regular")
THEN
NOT DB_SGM_LGM_PLACED_PARTS((ITEM)_Item);
EXITSECTION

ENDEXITSECTION
ParentTargetEdge "__Start"
